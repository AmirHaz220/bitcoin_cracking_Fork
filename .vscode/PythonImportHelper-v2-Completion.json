[
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pyopencl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyopencl",
        "description": "pyopencl",
        "detail": "pyopencl",
        "documentation": {}
    },
    {
        "label": "Mnemonic",
        "importPath": "mnemonic",
        "description": "mnemonic",
        "isExtraImport": true,
        "detail": "mnemonic",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "as_completed",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def info():\n        print('\\n' + '=' * 60 + '\\nOpenCL Platforms and Devices')\n        for i,platformNum in enumerate(cl.get_platforms()):\n            print('=' * 60)\n            print('Platform %d - Name: ' %i + platformNum.name)\n            print('Platform %d - Vendor: ' %i + platformNum.vendor)\n            print('Platform %d - Version: ' %i + platformNum.version)\n            print('Platform %d - Profile: ' %i + platformNum.profile)\n            for device in platformNum.get_devices():\n                print(' ' + '-' * 56)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "print_device_info",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def print_device_info(device):\n    print(f\"Device Name: {device.name.strip()}\")\n    print(f\"Device Type: {'GPU' if device.type == cl.device_type.GPU else 'CPU'}\")\n    print(f\"OpenCL Version: {device.version.strip()}\")\n    print(f\"Driver Version: {device.driver_version.strip()}\")\n    print(f\"Max Compute Units: {device.max_compute_units}\")\n    print(f\"Max Work Group Size: {device.max_work_group_size}\")\n    print(f\"Max Work Item Dimensions: {device.max_work_item_dimensions}\")\n    print(f\"Max Work Item Sizes: {device.max_work_item_sizes}\")\n    print(f\"Global Memory Size: {device.global_mem_size / (1024 ** 2):.2f} MB\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "run_kernel",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def run_kernel(program, queue):\n    context = program.context\n    kernel = program.verify\n    elements = global_workers * 10\n    bytes = elements * 8\n    inicio = time.perf_counter()\n    high, low = mnemonic_to_uint64_pair(words_to_indices(FIXED_WORDS))\n    high_buf = cl.Buffer(context, cl.mem_flags.READ_ONLY | cl.mem_flags.COPY_HOST_PTR, hostbuf=np.array([high], dtype=np.uint64))\n    low_buf = cl.Buffer(context, cl.mem_flags.READ_ONLY | cl.mem_flags.COPY_HOST_PTR, hostbuf=np.array([low], dtype=np.uint64))\n    output_buf = cl.Buffer(context, cl.mem_flags.WRITE_ONLY, bytes)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "carregar_wallets",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def carregar_wallets():\n    memoria = {}\n    print(\"Carregando endereços Bitcoin na Memória\")\n    with open(\"wallets.tsv\", \"r\") as arquivo:\n        for linha in arquivo:\n            linha = linha.strip()\n            if linha:\n                try:\n                    addr, saldo = linha.split()\n                    memoria[addr] = float(saldo)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "build_program",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def build_program(context, *filenames):\n    source_code = \"\"\n    for filename in filenames:\n        source_code += load_program_source(filename) + \"\\n\\n\\n\"\n    return cl.Program(context, source_code).build()\ndef words_to_indices(words):\n    indices = []\n    for word in words:\n        if word in mnemo.wordlist:\n            indices.append(mnemo.wordlist.index(word))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "words_to_indices",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def words_to_indices(words):\n    indices = []\n    for word in words:\n        if word in mnemo.wordlist:\n            indices.append(mnemo.wordlist.index(word))\n    return np.array(indices, dtype=np.int32)\ndef mnemonic_to_uint64_pair(indices):\n    binary_string = ''.join(f\"{index:011b}\" for index in indices)[:-4]\n    binary_string = binary_string.ljust(128, '0')\n    low = int(binary_string[:64], 2)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "mnemonic_to_uint64_pair",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def mnemonic_to_uint64_pair(indices):\n    binary_string = ''.join(f\"{index:011b}\" for index in indices)[:-4]\n    binary_string = binary_string.ljust(128, '0')\n    low = int(binary_string[:64], 2)\n    high = int(binary_string[64:], 2)\n    return high, low\ndef uint64_pair_to_mnemonic(high, low):\n    binary_string = f\"{high:064b}{low:064b}\"\n    indices = [int(binary_string[i:i+11], 2)\n               for i in range(0, len(binary_string), 11)]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "uint64_pair_to_mnemonic",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def uint64_pair_to_mnemonic(high, low):\n    binary_string = f\"{high:064b}{low:064b}\"\n    indices = [int(binary_string[i:i+11], 2)\n               for i in range(0, len(binary_string), 11)]\n    words = [mnemo.wordlist[index]\n             for index in indices if index < len(mnemo.wordlist)]\n    seed = ' '.join(words)\n    return seed\ndef main():\n    try:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    try:\n        platforms = cl.get_platforms()\n        devices = platforms[0].get_devices()\n        device = devices[0]\n        print_device_info(device)\n        context = cl.Context([device])\n        queue = cl.CommandQueue(context)\n        print(f\"Dispositivo: {device.name}\")\n        program = build_program(context,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "load_program_source",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def load_program_source(filename):\n    with open(filename, 'r') as f:\n        content = f.read()\n    return content\nif __name__ == \"__main__\":\n    #carregar_wallets()\n    main()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "os.environ['PYOPENCL_COMPILER_OUTPUT']",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "os.environ['PYOPENCL_COMPILER_OUTPUT'] = '1'\ndef info():\n        print('\\n' + '=' * 60 + '\\nOpenCL Platforms and Devices')\n        for i,platformNum in enumerate(cl.get_platforms()):\n            print('=' * 60)\n            print('Platform %d - Name: ' %i + platformNum.name)\n            print('Platform %d - Vendor: ' %i + platformNum.vendor)\n            print('Platform %d - Version: ' %i + platformNum.version)\n            print('Platform %d - Profile: ' %i + platformNum.profile)\n            for device in platformNum.get_devices():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "mnemo",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "mnemo = Mnemonic(\"english\")\nFIXED_WORDS = \"actual action amused black abandon adjust winter abandon abandon abandon abandon abandon\".split()\nDESTINY_WALLET = \"bc1q9nfphml9vzfs6qxyyfqdve5vrqw62dp26qhalx\"\nFIXED_SEED = \"actual action amused black abandon adjust winter \"\nblock_fix = len(FIXED_SEED)-(len(FIXED_SEED)%8)\nglobal_workers = 24_000_000\nrepeater_workers = 1_000_000\nlocal_workers = 256\ntw = (global_workers,)\ntt = (local_workers,)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FIXED_WORDS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "FIXED_WORDS = \"actual action amused black abandon adjust winter abandon abandon abandon abandon abandon\".split()\nDESTINY_WALLET = \"bc1q9nfphml9vzfs6qxyyfqdve5vrqw62dp26qhalx\"\nFIXED_SEED = \"actual action amused black abandon adjust winter \"\nblock_fix = len(FIXED_SEED)-(len(FIXED_SEED)%8)\nglobal_workers = 24_000_000\nrepeater_workers = 1_000_000\nlocal_workers = 256\ntw = (global_workers,)\ntt = (local_workers,)\nprint(f\"Rodando OpenCL com {global_workers} GPU THREADS e {repeater_workers * global_workers}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DESTINY_WALLET",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DESTINY_WALLET = \"bc1q9nfphml9vzfs6qxyyfqdve5vrqw62dp26qhalx\"\nFIXED_SEED = \"actual action amused black abandon adjust winter \"\nblock_fix = len(FIXED_SEED)-(len(FIXED_SEED)%8)\nglobal_workers = 24_000_000\nrepeater_workers = 1_000_000\nlocal_workers = 256\ntw = (global_workers,)\ntt = (local_workers,)\nprint(f\"Rodando OpenCL com {global_workers} GPU THREADS e {repeater_workers * global_workers}\")\n# Função para imprimir as informações do dispositivo",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FIXED_SEED",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "FIXED_SEED = \"actual action amused black abandon adjust winter \"\nblock_fix = len(FIXED_SEED)-(len(FIXED_SEED)%8)\nglobal_workers = 24_000_000\nrepeater_workers = 1_000_000\nlocal_workers = 256\ntw = (global_workers,)\ntt = (local_workers,)\nprint(f\"Rodando OpenCL com {global_workers} GPU THREADS e {repeater_workers * global_workers}\")\n# Função para imprimir as informações do dispositivo\ndef print_device_info(device):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "block_fix",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "block_fix = len(FIXED_SEED)-(len(FIXED_SEED)%8)\nglobal_workers = 24_000_000\nrepeater_workers = 1_000_000\nlocal_workers = 256\ntw = (global_workers,)\ntt = (local_workers,)\nprint(f\"Rodando OpenCL com {global_workers} GPU THREADS e {repeater_workers * global_workers}\")\n# Função para imprimir as informações do dispositivo\ndef print_device_info(device):\n    print(f\"Device Name: {device.name.strip()}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "global_workers",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "global_workers = 24_000_000\nrepeater_workers = 1_000_000\nlocal_workers = 256\ntw = (global_workers,)\ntt = (local_workers,)\nprint(f\"Rodando OpenCL com {global_workers} GPU THREADS e {repeater_workers * global_workers}\")\n# Função para imprimir as informações do dispositivo\ndef print_device_info(device):\n    print(f\"Device Name: {device.name.strip()}\")\n    print(f\"Device Type: {'GPU' if device.type == cl.device_type.GPU else 'CPU'}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "repeater_workers",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "repeater_workers = 1_000_000\nlocal_workers = 256\ntw = (global_workers,)\ntt = (local_workers,)\nprint(f\"Rodando OpenCL com {global_workers} GPU THREADS e {repeater_workers * global_workers}\")\n# Função para imprimir as informações do dispositivo\ndef print_device_info(device):\n    print(f\"Device Name: {device.name.strip()}\")\n    print(f\"Device Type: {'GPU' if device.type == cl.device_type.GPU else 'CPU'}\")\n    print(f\"OpenCL Version: {device.version.strip()}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "local_workers",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "local_workers = 256\ntw = (global_workers,)\ntt = (local_workers,)\nprint(f\"Rodando OpenCL com {global_workers} GPU THREADS e {repeater_workers * global_workers}\")\n# Função para imprimir as informações do dispositivo\ndef print_device_info(device):\n    print(f\"Device Name: {device.name.strip()}\")\n    print(f\"Device Type: {'GPU' if device.type == cl.device_type.GPU else 'CPU'}\")\n    print(f\"OpenCL Version: {device.version.strip()}\")\n    print(f\"Driver Version: {device.driver_version.strip()}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "tw",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "tw = (global_workers,)\ntt = (local_workers,)\nprint(f\"Rodando OpenCL com {global_workers} GPU THREADS e {repeater_workers * global_workers}\")\n# Função para imprimir as informações do dispositivo\ndef print_device_info(device):\n    print(f\"Device Name: {device.name.strip()}\")\n    print(f\"Device Type: {'GPU' if device.type == cl.device_type.GPU else 'CPU'}\")\n    print(f\"OpenCL Version: {device.version.strip()}\")\n    print(f\"Driver Version: {device.driver_version.strip()}\")\n    print(f\"Max Compute Units: {device.max_compute_units}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "tt",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "tt = (local_workers,)\nprint(f\"Rodando OpenCL com {global_workers} GPU THREADS e {repeater_workers * global_workers}\")\n# Função para imprimir as informações do dispositivo\ndef print_device_info(device):\n    print(f\"Device Name: {device.name.strip()}\")\n    print(f\"Device Type: {'GPU' if device.type == cl.device_type.GPU else 'CPU'}\")\n    print(f\"OpenCL Version: {device.version.strip()}\")\n    print(f\"Driver Version: {device.driver_version.strip()}\")\n    print(f\"Max Compute Units: {device.max_compute_units}\")\n    print(f\"Max Work Group Size: {device.max_work_group_size}\")",
        "detail": "main",
        "documentation": {}
    }
]